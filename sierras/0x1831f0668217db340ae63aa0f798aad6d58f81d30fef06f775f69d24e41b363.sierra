type [0] = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type [1] = u128 [storable: true, drop: true, dup: true, zero_sized: false];
type [2] = Struct<ut@[1325343513152088812341467750635149026053683136611136091911357178651207272643]> [storable: true, drop: true, dup: true, zero_sized: true];
type [3] = Enum<ut@[1428587981972971377690703480718106917688158670535227238524565791273937320306], [2], [2]> [storable: true, drop: true, dup: true, zero_sized: false];
type [4] = Struct<ut@[1325343513152088812341467750635149026053683136611136091911357178651207272643], [1], [3]> [storable: true, drop: true, dup: true, zero_sized: false];
type [5] = Struct<ut@[1325343513152088812341467750635149026053683136611136091911357178651207272643], [1], [1]> [storable: true, drop: true, dup: true, zero_sized: false];
type [6] = U128MulGuarantee [storable: true, drop: false, dup: false, zero_sized: false];
type [7] = Struct<ut@[1071017438933873571052977544980627024045949220019505706267713774331285277618], [1], [1]> [storable: true, drop: true, dup: true, zero_sized: false];
type [8] = Struct<ut@[1325343513152088812341467750635149026053683136611136091911357178651207272643], [7], [3]> [storable: true, drop: true, dup: true, zero_sized: false];
type [9] = Enum<ut@[523703995564884992331731899845619438921868538240978529314873467267171327154], [7], [2]> [storable: true, drop: true, dup: true, zero_sized: false];
type [10] = Array<[22]> [storable: true, drop: true, dup: false, zero_sized: false];
type [11] = Snapshot<[10]> [storable: true, drop: true, dup: true, zero_sized: false];
type [12] = Struct<ut@[782572820229152792105145177694740816763001980856532159945905090893343825762], [11]> [storable: true, drop: true, dup: true, zero_sized: false];
type [13] = Struct<ut@[1325343513152088812341467750635149026053683136611136091911357178651207272643], [12]> [storable: true, drop: true, dup: true, zero_sized: false];
type [14] = Struct<ut@[1325343513152088812341467750635149026053683136611136091911357178651207272643], [7]> [storable: true, drop: true, dup: true, zero_sized: false];
type [15] = Struct<ut@[640126984585624630990013944782631102820301644699864366139839615702772668018]> [storable: true, drop: true, dup: true, zero_sized: true];
type [16] = Struct<ut@[1325343513152088812341467750635149026053683136611136091911357178651207272643], [15], [10]> [storable: true, drop: true, dup: false, zero_sized: false];
type [17] = Enum<ut@[1269060844977816900161390774519283771907939153398640017202038152081550937644], [14], [16]> [storable: true, drop: true, dup: false, zero_sized: false];
type [18] = Struct<ut@[1297666055966916851391255654314139716470680359157124992953151397658014360769]> [storable: true, drop: true, dup: true, zero_sized: true];
type [19] = BuiltinCosts [storable: true, drop: true, dup: true, zero_sized: false];
type [20] = System [storable: true, drop: false, dup: false, zero_sized: false];
type [21] = Enum<ut@[270671131472959732993844072583327084608513343873724697777364695367457417702], [13], [16]> [storable: true, drop: true, dup: false, zero_sized: false];
type [22] = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type [23] = u32 [storable: true, drop: true, dup: true, zero_sized: false];
type [24] = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];

libfunc [0] = revoke_ap_tracking;
libfunc [1] = withdraw_gas;
libfunc [2] = branch_align;
libfunc [3] = struct_deconstruct<[12]>;
libfunc [4] = array_len<[22]>;
libfunc [5] = snapshot_take<[23]>;
libfunc [6] = drop<[23]>;
libfunc [7] = u32_const<0>;
libfunc [8] = rename<[23]>;
libfunc [9] = store_temp<[23]>;
libfunc [10] = store_temp<[0]>;
libfunc [11] = u32_eq;
libfunc [12] = array_new<[22]>;
libfunc [13] = felt252_const<7733229381460288120802334208475838166080759535023995805565484692595>;
libfunc [14] = store_temp<[22]>;
libfunc [15] = array_append<[22]>;
libfunc [16] = struct_construct<[15]>;
libfunc [17] = struct_construct<[16]>;
libfunc [18] = enum_init<[21], 1>;
libfunc [19] = store_temp<[24]>;
libfunc [20] = store_temp<[20]>;
libfunc [21] = store_temp<[21]>;
libfunc [22] = get_builtin_costs;
libfunc [23] = store_temp<[19]>;
libfunc [24] = withdraw_gas_all;
libfunc [25] = struct_construct<[18]>;
libfunc [26] = snapshot_take<[18]>;
libfunc [27] = drop<[18]>;
libfunc [28] = function_call<user@[1]>;
libfunc [29] = enum_match<[17]>;
libfunc [30] = struct_deconstruct<[14]>;
libfunc [31] = snapshot_take<[7]>;
libfunc [32] = drop<[7]>;
libfunc [33] = store_temp<[7]>;
libfunc [34] = store_temp<[10]>;
libfunc [35] = function_call<user@[2]>;
libfunc [36] = drop<[2]>;
libfunc [37] = snapshot_take<[10]>;
libfunc [38] = drop<[10]>;
libfunc [39] = struct_construct<[12]>;
libfunc [40] = struct_construct<[13]>;
libfunc [41] = enum_init<[21], 0>;
libfunc [42] = felt252_const<375233589013918064796019>;
libfunc [43] = drop<[12]>;
libfunc [44] = u128_const<1000000000000>;
libfunc [45] = u128_const<0>;
libfunc [46] = struct_construct<[7]>;
libfunc [47] = u128_const<1000000000000000000>;
libfunc [48] = function_call<user@[3]>;
libfunc [49] = struct_construct<[14]>;
libfunc [50] = enum_init<[17], 0>;
libfunc [51] = store_temp<[17]>;
libfunc [52] = enum_init<[17], 1>;
libfunc [53] = dup<[7]>;
libfunc [54] = struct_deconstruct<[7]>;
libfunc [55] = drop<[1]>;
libfunc [56] = rename<[1]>;
libfunc [57] = u128_to_felt252;
libfunc [58] = struct_construct<[2]>;
libfunc [59] = function_call<user@[4]>;
libfunc [60] = enum_match<[9]>;
libfunc [61] = felt252_const<39879774624083218221772669863277689073527>;
libfunc [62] = function_call<user@[5]>;
libfunc [63] = struct_deconstruct<[8]>;
libfunc [64] = enum_match<[3]>;
libfunc [65] = enum_init<[9], 0>;
libfunc [66] = store_temp<[9]>;
libfunc [67] = jump;
libfunc [68] = enum_init<[9], 1>;
libfunc [69] = dup<[1]>;
libfunc [70] = u128_guarantee_mul;
libfunc [71] = store_temp<[6]>;
libfunc [72] = function_call<user@[6]>;
libfunc [73] = struct_construct<[5]>;
libfunc [74] = struct_deconstruct<[5]>;
libfunc [75] = store_temp<[1]>;
libfunc [76] = u128_overflowing_add;
libfunc [77] = snapshot_take<[1]>;
libfunc [78] = u128_eq;
libfunc [79] = enum_init<[3], 0>;
libfunc [80] = store_temp<[3]>;
libfunc [81] = enum_init<[3], 1>;
libfunc [82] = bool_not_impl;
libfunc [83] = u128_overflowing_sub;
libfunc [84] = rename<[0]>;
libfunc [85] = rename<[3]>;
libfunc [86] = struct_construct<[4]>;
libfunc [87] = store_temp<[4]>;
libfunc [88] = struct_deconstruct<[4]>;
libfunc [89] = drop<[3]>;
libfunc [90] = struct_construct<[8]>;
libfunc [91] = store_temp<[8]>;
libfunc [92] = u128_mul_guarantee_verify;

[0]() -> (); // 0
[1]([0], [1]) { fallthrough([4], [5]) 78([6], [7]) }; // 1
[2]() -> (); // 2
[3]([3]) -> ([8]); // 3
[4]([8]) -> ([9]); // 4
[5]([9]) -> ([10], [11]); // 5
[6]([10]) -> (); // 6
[7]() -> ([12]); // 7
[5]([12]) -> ([13], [14]); // 8
[6]([13]) -> (); // 9
[8]([11]) -> ([15]); // 10
[8]([14]) -> ([16]); // 11
[9]([15]) -> ([15]); // 12
[10]([4]) -> ([4]); // 13
[11]([15], [16]) { fallthrough() 28() }; // 14
[2]() -> (); // 15
[12]() -> ([17]); // 16
[13]() -> ([18]); // 17
[14]([18]) -> ([18]); // 18
[15]([17], [18]) -> ([19]); // 19
[16]() -> ([20]); // 20
[17]([20], [19]) -> ([21]); // 21
[18]([21]) -> ([22]); // 22
[10]([4]) -> ([4]); // 23
[19]([5]) -> ([5]); // 24
[20]([2]) -> ([2]); // 25
[21]([22]) -> ([22]); // 26
return([4], [5], [2], [22]); // 27
[2]() -> (); // 28
[22]() -> ([23]); // 29
[23]([23]) -> ([23]); // 30
[24]([4], [5], [23]) { fallthrough([24], [25]) 65([26], [27]) }; // 31
[2]() -> (); // 32
[25]() -> ([28]); // 33
[26]([28]) -> ([29], [30]); // 34
[27]([29]) -> (); // 35
[10]([24]) -> ([24]); // 36
[28]([24], [30]) -> ([31], [32]); // 37
[29]([32]) { fallthrough([33]) 58([34]) }; // 38
[2]() -> (); // 39
[12]() -> ([35]); // 40
[30]([33]) -> ([36]); // 41
[31]([36]) -> ([37], [38]); // 42
[32]([37]) -> (); // 43
[33]([38]) -> ([38]); // 44
[34]([35]) -> ([35]); // 45
[35]([38], [35]) -> ([39], [40]); // 46
[36]([40]) -> (); // 47
[37]([39]) -> ([41], [42]); // 48
[38]([41]) -> (); // 49
[39]([42]) -> ([43]); // 50
[40]([43]) -> ([44]); // 51
[41]([44]) -> ([45]); // 52
[10]([31]) -> ([31]); // 53
[19]([25]) -> ([25]); // 54
[20]([2]) -> ([2]); // 55
[21]([45]) -> ([45]); // 56
return([31], [25], [2], [45]); // 57
[2]() -> (); // 58
[18]([34]) -> ([46]); // 59
[10]([31]) -> ([31]); // 60
[19]([25]) -> ([25]); // 61
[20]([2]) -> ([2]); // 62
[21]([46]) -> ([46]); // 63
return([31], [25], [2], [46]); // 64
[2]() -> (); // 65
[12]() -> ([47]); // 66
[42]() -> ([48]); // 67
[14]([48]) -> ([48]); // 68
[15]([47], [48]) -> ([49]); // 69
[16]() -> ([50]); // 70
[17]([50], [49]) -> ([51]); // 71
[18]([51]) -> ([52]); // 72
[10]([26]) -> ([26]); // 73
[19]([27]) -> ([27]); // 74
[20]([2]) -> ([2]); // 75
[21]([52]) -> ([52]); // 76
return([26], [27], [2], [52]); // 77
[2]() -> (); // 78
[43]([3]) -> (); // 79
[12]() -> ([53]); // 80
[42]() -> ([54]); // 81
[14]([54]) -> ([54]); // 82
[15]([53], [54]) -> ([55]); // 83
[16]() -> ([56]); // 84
[17]([56], [55]) -> ([57]); // 85
[18]([57]) -> ([58]); // 86
[10]([6]) -> ([6]); // 87
[19]([7]) -> ([7]); // 88
[20]([2]) -> ([2]); // 89
[21]([58]) -> ([58]); // 90
return([6], [7], [2], [58]); // 91
[27]([1]) -> (); // 92
[44]() -> ([2]); // 93
[45]() -> ([3]); // 94
[46]([2], [3]) -> ([4]); // 95
[47]() -> ([5]); // 96
[45]() -> ([6]); // 97
[46]([5], [6]) -> ([7]); // 98
[10]([0]) -> ([0]); // 99
[33]([4]) -> ([4]); // 100
[33]([7]) -> ([7]); // 101
[48]([0], [4], [7]) -> ([8], [9]); // 102
[29]([9]) { fallthrough([10]) 111([11]) }; // 103
[2]() -> (); // 104
[30]([10]) -> ([12]); // 105
[49]([12]) -> ([13]); // 106
[50]([13]) -> ([14]); // 107
[10]([8]) -> ([8]); // 108
[51]([14]) -> ([14]); // 109
return([8], [14]); // 110
[2]() -> (); // 111
[52]([11]) -> ([15]); // 112
[10]([8]) -> ([8]); // 113
[51]([15]) -> ([15]); // 114
return([8], [15]); // 115
[53]([0]) -> ([0], [2]); // 116
[54]([2]) -> ([3], [4]); // 117
[55]([4]) -> (); // 118
[56]([3]) -> ([5]); // 119
[57]([5]) -> ([6]); // 120
[15]([1], [6]) -> ([7]); // 121
[54]([0]) -> ([8], [9]); // 122
[55]([8]) -> (); // 123
[56]([9]) -> ([10]); // 124
[57]([10]) -> ([11]); // 125
[15]([7], [11]) -> ([12]); // 126
[58]() -> ([13]); // 127
[34]([12]) -> ([12]); // 128
return([12], [13]); // 129
[10]([0]) -> ([0]); // 130
[33]([1]) -> ([1]); // 131
[33]([2]) -> ([2]); // 132
[59]([0], [1], [2]) -> ([3], [4]); // 133
[60]([4]) { fallthrough([5]) 141([6]) }; // 134
[2]() -> (); // 135
[49]([5]) -> ([7]); // 136
[50]([7]) -> ([8]); // 137
[10]([3]) -> ([3]); // 138
[51]([8]) -> ([8]); // 139
return([3], [8]); // 140
[2]() -> (); // 141
[36]([6]) -> (); // 142
[12]() -> ([9]); // 143
[61]() -> ([10]); // 144
[14]([10]) -> ([10]); // 145
[15]([9], [10]) -> ([11]); // 146
[16]() -> ([12]); // 147
[17]([12], [11]) -> ([13]); // 148
[52]([13]) -> ([14]); // 149
[10]([3]) -> ([3]); // 150
[51]([14]) -> ([14]); // 151
return([3], [14]); // 152
[10]([0]) -> ([0]); // 153
[33]([1]) -> ([1]); // 154
[33]([2]) -> ([2]); // 155
[62]([0], [1], [2]) -> ([3], [4]); // 156
[63]([4]) -> ([5], [6]); // 157
[64]([6]) { fallthrough([7]) 164([8]) }; // 158
[2]() -> (); // 159
[36]([7]) -> (); // 160
[65]([5]) -> ([9]); // 161
[66]([9]) -> ([10]); // 162
[67]() { 170() }; // 163
[2]() -> (); // 164
[36]([8]) -> (); // 165
[32]([5]) -> (); // 166
[58]() -> ([11]); // 167
[68]([11]) -> ([12]); // 168
[66]([12]) -> ([10]); // 169
[10]([3]) -> ([3]); // 170
[66]([10]) -> ([10]); // 171
return([3], [10]); // 172
[54]([1]) -> ([3], [4]); // 173
[54]([2]) -> ([5], [6]); // 174
[69]([3]) -> ([3], [7]); // 175
[69]([5]) -> ([5], [8]); // 176
[70]([7], [8]) -> ([9], [10], [11]); // 177
[10]([0]) -> ([0]); // 178
[71]([11]) -> ([11]); // 179
[72]([0], [11]) -> ([12], [13]); // 180
[36]([13]) -> (); // 181
[69]([6]) -> ([6], [14]); // 182
[70]([3], [14]) -> ([15], [16], [17]); // 183
[10]([12]) -> ([12]); // 184
[71]([17]) -> ([17]); // 185
[72]([12], [17]) -> ([18], [19]); // 186
[36]([19]) -> (); // 187
[73]([15], [16]) -> ([20]); // 188
[74]([20]) -> ([21], [22]); // 189
[69]([4]) -> ([4], [23]); // 190
[70]([23], [5]) -> ([24], [25], [26]); // 191
[10]([18]) -> ([18]); // 192
[71]([26]) -> ([26]); // 193
[72]([18], [26]) -> ([27], [28]); // 194
[36]([28]) -> (); // 195
[73]([24], [25]) -> ([29]); // 196
[74]([29]) -> ([30], [31]); // 197
[73]([9], [10]) -> ([32]); // 198
[74]([32]) -> ([33], [34]); // 199
[75]([33]) -> ([33]); // 200
[75]([22]) -> ([22]); // 201
[75]([21]) -> ([21]); // 202
[75]([30]) -> ([30]); // 203
[75]([31]) -> ([31]); // 204
[75]([34]) -> ([34]); // 205
[76]([27], [33], [22]) { fallthrough([35], [36]) 303([37], [38]) }; // 206
[2]() -> (); // 207
[77]([21]) -> ([39], [40]); // 208
[55]([39]) -> (); // 209
[45]() -> ([41]); // 210
[77]([41]) -> ([42], [43]); // 211
[55]([42]) -> (); // 212
[56]([40]) -> ([44]); // 213
[77]([44]) -> ([45], [46]); // 214
[55]([45]) -> (); // 215
[56]([43]) -> ([47]); // 216
[77]([47]) -> ([48], [49]); // 217
[55]([48]) -> (); // 218
[56]([46]) -> ([50]); // 219
[56]([49]) -> ([51]); // 220
[10]([35]) -> ([35]); // 221
[78]([50], [51]) { fallthrough() 228() }; // 222
[2]() -> (); // 223
[55]([6]) -> (); // 224
[55]([4]) -> (); // 225
[55]([30]) -> (); // 226
[67]() { 295() }; // 227
[2]() -> (); // 228
[77]([30]) -> ([52], [53]); // 229
[55]([52]) -> (); // 230
[45]() -> ([54]); // 231
[77]([54]) -> ([55], [56]); // 232
[55]([55]) -> (); // 233
[56]([53]) -> ([57]); // 234
[77]([57]) -> ([58], [59]); // 235
[55]([58]) -> (); // 236
[56]([56]) -> ([60]); // 237
[77]([60]) -> ([61], [62]); // 238
[55]([61]) -> (); // 239
[56]([59]) -> ([63]); // 240
[56]([62]) -> ([64]); // 241
[78]([63], [64]) { fallthrough() 248() }; // 242
[2]() -> (); // 243
[58]() -> ([65]); // 244
[79]([65]) -> ([66]); // 245
[80]([66]) -> ([67]); // 246
[67]() { 252() }; // 247
[2]() -> (); // 248
[58]() -> ([68]); // 249
[81]([68]) -> ([69]); // 250
[80]([69]) -> ([67]); // 251
[82]([67]) -> ([70]); // 252
[80]([70]) -> ([70]); // 253
[64]([70]) { fallthrough([71]) 291([72]) }; // 254
[2]() -> (); // 255
[36]([71]) -> (); // 256
[45]() -> ([73]); // 257
[75]([73]) -> ([73]); // 258
[83]([35], [73], [4]) { fallthrough([74], [75]) 268([76], [77]) }; // 259
[2]() -> (); // 260
[55]([75]) -> (); // 261
[55]([6]) -> (); // 262
[58]() -> ([78]); // 263
[79]([78]) -> ([79]); // 264
[10]([74]) -> ([80]); // 265
[80]([79]) -> ([81]); // 266
[67]() { 288() }; // 267
[2]() -> (); // 268
[55]([77]) -> (); // 269
[45]() -> ([82]); // 270
[75]([82]) -> ([82]); // 271
[83]([76], [82], [6]) { fallthrough([83], [84]) 280([85], [86]) }; // 272
[2]() -> (); // 273
[55]([84]) -> (); // 274
[58]() -> ([87]); // 275
[79]([87]) -> ([88]); // 276
[10]([83]) -> ([89]); // 277
[80]([88]) -> ([90]); // 278
[67]() { 286() }; // 279
[2]() -> (); // 280
[55]([86]) -> (); // 281
[58]() -> ([91]); // 282
[81]([91]) -> ([92]); // 283
[10]([85]) -> ([89]); // 284
[80]([92]) -> ([90]); // 285
[84]([89]) -> ([80]); // 286
[85]([90]) -> ([81]); // 287
[84]([80]) -> ([93]); // 288
[85]([81]) -> ([94]); // 289
[67]() { 299() }; // 290
[2]() -> (); // 291
[36]([72]) -> (); // 292
[55]([6]) -> (); // 293
[55]([4]) -> (); // 294
[58]() -> ([95]); // 295
[81]([95]) -> ([96]); // 296
[10]([35]) -> ([93]); // 297
[80]([96]) -> ([94]); // 298
[86]([36], [94]) -> ([97]); // 299
[10]([93]) -> ([98]); // 300
[87]([97]) -> ([99]); // 301
[67]() { 313() }; // 302
[2]() -> (); // 303
[55]([21]) -> (); // 304
[55]([30]) -> (); // 305
[55]([6]) -> (); // 306
[55]([4]) -> (); // 307
[58]() -> ([100]); // 308
[81]([100]) -> ([101]); // 309
[86]([38], [101]) -> ([102]); // 310
[10]([37]) -> ([98]); // 311
[87]([102]) -> ([99]); // 312
[88]([99]) -> ([103], [104]); // 313
[76]([98], [103], [31]) { fallthrough([105], [106]) 320([107], [108]) }; // 314
[2]() -> (); // 315
[86]([106], [104]) -> ([109]); // 316
[10]([105]) -> ([110]); // 317
[87]([109]) -> ([111]); // 318
[67]() { 327() }; // 319
[2]() -> (); // 320
[89]([104]) -> (); // 321
[58]() -> ([112]); // 322
[81]([112]) -> ([113]); // 323
[86]([108], [113]) -> ([114]); // 324
[10]([107]) -> ([110]); // 325
[87]([114]) -> ([111]); // 326
[88]([111]) -> ([115], [116]); // 327
[46]([34], [115]) -> ([117]); // 328
[90]([117], [116]) -> ([118]); // 329
[10]([110]) -> ([110]); // 330
[91]([118]) -> ([118]); // 331
return([110], [118]); // 332
[92]([0], [1]) -> ([2]); // 333
[58]() -> ([3]); // 334
[10]([2]) -> ([2]); // 335
return([2], [3]); // 336

[0]@0([0]: [0], [1]: [24], [2]: [20], [3]: [12]) -> ([0], [24], [20], [21]);
[1]@92([0]: [0], [1]: [18]) -> ([0], [17]);
[2]@116([0]: [7], [1]: [10]) -> ([10], [2]);
[3]@130([0]: [0], [1]: [7], [2]: [7]) -> ([0], [17]);
[4]@153([0]: [0], [1]: [7], [2]: [7]) -> ([0], [9]);
[5]@173([0]: [0], [1]: [7], [2]: [7]) -> ([0], [8]);
[6]@333([0]: [0], [1]: [6]) -> ([0], [2]);
