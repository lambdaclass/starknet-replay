<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1398" onload="init(evt)" viewBox="0 0 1200 1398" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1398" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1381.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1381.00"> </text><svg id="frames" x="10" width="1180" total_samples="11"><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 9.09%)</title><rect x="0.0000%" y="1269" width="9.0909%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1279.50">libsystem_pla..</text></g><g><title>replay`&lt;replay::ReplayCLI as clap_builder::derive::CommandFactory&gt;::command (1 samples, 9.09%)</title><rect x="9.0909%" y="1189" width="9.0909%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="9.3409%" y="1199.50">replay`&lt;repla..</text></g><g><title>replay`&lt;replay::ReplayCLI as clap_builder::derive::Args&gt;::augment_args (1 samples, 9.09%)</title><rect x="9.0909%" y="1173" width="9.0909%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="9.3409%" y="1183.50">replay`&lt;repla..</text></g><g><title>replay`&lt;replay::ReplayExecute as clap_builder::derive::Subcommand&gt;::augment_subcommands (1 samples, 9.09%)</title><rect x="9.0909%" y="1157" width="9.0909%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="1"/><text x="9.3409%" y="1167.50">replay`&lt;repla..</text></g><g><title>replay`clap_builder::builder::arg::Arg::value_name (1 samples, 9.09%)</title><rect x="9.0909%" y="1141" width="9.0909%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="1"/><text x="9.3409%" y="1151.50">replay`clap_b..</text></g><g><title>replay`clap_builder::builder::arg::Arg::value_names (1 samples, 9.09%)</title><rect x="9.0909%" y="1125" width="9.0909%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="1"/><text x="9.3409%" y="1135.50">replay`clap_b..</text></g><g><title>replay`core::iter::traits::iterator::Iterator::collect (1 samples, 9.09%)</title><rect x="9.0909%" y="1109" width="9.0909%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="1"/><text x="9.3409%" y="1119.50">replay`core::..</text></g><g><title>replay`&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 9.09%)</title><rect x="9.0909%" y="1093" width="9.0909%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="1"/><text x="9.3409%" y="1103.50">replay`&lt;alloc..</text></g><g><title>replay`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 9.09%)</title><rect x="9.0909%" y="1077" width="9.0909%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="1"/><text x="9.3409%" y="1087.50">replay`&lt;alloc..</text></g><g><title>replay`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 9.09%)</title><rect x="9.0909%" y="1061" width="9.0909%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="1"/><text x="9.3409%" y="1071.50">replay`&lt;alloc..</text></g><g><title>replay`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 9.09%)</title><rect x="9.0909%" y="1045" width="9.0909%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="1"/><text x="9.3409%" y="1055.50">replay`&lt;alloc..</text></g><g><title>replay`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 9.09%)</title><rect x="9.0909%" y="1029" width="9.0909%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="1"/><text x="9.3409%" y="1039.50">replay`alloc:..</text></g><g><title>replay`core::iter::traits::iterator::Iterator::for_each (1 samples, 9.09%)</title><rect x="9.0909%" y="1013" width="9.0909%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="1"/><text x="9.3409%" y="1023.50">replay`core::..</text></g><g><title>replay`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 9.09%)</title><rect x="9.0909%" y="997" width="9.0909%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="1"/><text x="9.3409%" y="1007.50">replay`&lt;core:..</text></g><g><title>replay`&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 9.09%)</title><rect x="9.0909%" y="981" width="9.0909%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="1"/><text x="9.3409%" y="991.50">replay`&lt;core:..</text></g><g><title>replay`core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::_{{closure}} (1 samples, 9.09%)</title><rect x="9.0909%" y="965" width="9.0909%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="1"/><text x="9.3409%" y="975.50">replay`core::..</text></g><g><title>replay`clap_builder::derive::Parser::parse (2 samples, 18.18%)</title><rect x="9.0909%" y="1205" width="18.1818%" height="15" fill="rgb(225,20,46)" fg:x="1" fg:w="2"/><text x="9.3409%" y="1215.50">replay`clap_builder::derive:..</text></g><g><title>replay`clap_builder::builder::command::Command::get_matches (1 samples, 9.09%)</title><rect x="18.1818%" y="1189" width="9.0909%" height="15" fill="rgb(210,31,41)" fg:x="2" fg:w="1"/><text x="18.4318%" y="1199.50">replay`clap_b..</text></g><g><title>replay`clap_builder::builder::command::Command::get_matches_from (1 samples, 9.09%)</title><rect x="18.1818%" y="1173" width="9.0909%" height="15" fill="rgb(221,200,47)" fg:x="2" fg:w="1"/><text x="18.4318%" y="1183.50">replay`clap_b..</text></g><g><title>replay`core::result::Result&lt;T,E&gt;::unwrap_or_else (1 samples, 9.09%)</title><rect x="18.1818%" y="1157" width="9.0909%" height="15" fill="rgb(226,26,5)" fg:x="2" fg:w="1"/><text x="18.4318%" y="1167.50">replay`core::..</text></g><g><title>replay`clap_builder::builder::command::Command::get_matches_from::_{{closure}} (1 samples, 9.09%)</title><rect x="18.1818%" y="1141" width="9.0909%" height="15" fill="rgb(249,33,26)" fg:x="2" fg:w="1"/><text x="18.4318%" y="1151.50">replay`clap_b..</text></g><g><title>replay`clap_builder::error::Error&lt;F&gt;::print (1 samples, 9.09%)</title><rect x="18.1818%" y="1125" width="9.0909%" height="15" fill="rgb(235,183,28)" fg:x="2" fg:w="1"/><text x="18.4318%" y="1135.50">replay`clap_b..</text></g><g><title>replay`clap_builder::util::safe_exit (1 samples, 9.09%)</title><rect x="18.1818%" y="1109" width="9.0909%" height="15" fill="rgb(221,5,38)" fg:x="2" fg:w="1"/><text x="18.4318%" y="1119.50">replay`clap_b..</text></g><g><title>replay`std::sync::once::Once::call_once::_{{closure}} (1 samples, 9.09%)</title><rect x="18.1818%" y="1093" width="9.0909%" height="15" fill="rgb(247,18,42)" fg:x="2" fg:w="1"/><text x="18.4318%" y="1103.50">replay`std::s..</text></g><g><title>replay`std::sys::pal::unix::pipe::anon_pipe (1 samples, 9.09%)</title><rect x="18.1818%" y="1077" width="9.0909%" height="15" fill="rgb(241,131,45)" fg:x="2" fg:w="1"/><text x="18.4318%" y="1087.50">replay`std::s..</text></g><g><title>libsystem_c.dylib`exit (1 samples, 9.09%)</title><rect x="18.1818%" y="1061" width="9.0909%" height="15" fill="rgb(249,31,29)" fg:x="2" fg:w="1"/><text x="18.4318%" y="1071.50">libsystem_c.d..</text></g><g><title>libsystem_c.dylib`__cxa_finalize_ranges (1 samples, 9.09%)</title><rect x="18.1818%" y="1045" width="9.0909%" height="15" fill="rgb(225,111,53)" fg:x="2" fg:w="1"/><text x="18.4318%" y="1055.50">libsystem_c.d..</text></g><g><title>replay`llvm::cl::opt&lt;llvm::PGOViewCountsType, false, llvm::cl::parser&lt;llvm::PGOViewCountsType&gt;&gt;::~opt (1 samples, 9.09%)</title><rect x="18.1818%" y="1029" width="9.0909%" height="15" fill="rgb(238,160,17)" fg:x="2" fg:w="1"/><text x="18.4318%" y="1039.50">replay`llvm::..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 9.09%)</title><rect x="27.2727%" y="405" width="9.0909%" height="15" fill="rgb(214,148,48)" fg:x="3" fg:w="1"/><text x="27.5227%" y="415.50">replay`regex_..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c_alt_slice (1 samples, 9.09%)</title><rect x="27.2727%" y="389" width="9.0909%" height="15" fill="rgb(232,36,49)" fg:x="3" fg:w="1"/><text x="27.5227%" y="399.50">replay`regex_..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (1 samples, 9.09%)</title><rect x="27.2727%" y="373" width="9.0909%" height="15" fill="rgb(209,103,24)" fg:x="3" fg:w="1"/><text x="27.5227%" y="383.50">replay`regex_..</text></g><g><title>replay`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 9.09%)</title><rect x="27.2727%" y="357" width="9.0909%" height="15" fill="rgb(229,88,8)" fg:x="3" fg:w="1"/><text x="27.5227%" y="367.50">replay`&lt;core:..</text></g><g><title>replay`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 9.09%)</title><rect x="27.2727%" y="341" width="9.0909%" height="15" fill="rgb(213,181,19)" fg:x="3" fg:w="1"/><text x="27.5227%" y="351.50">replay`core::..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c_alt_slice::_{{closure}} (1 samples, 9.09%)</title><rect x="27.2727%" y="325" width="9.0909%" height="15" fill="rgb(254,191,54)" fg:x="3" fg:w="1"/><text x="27.5227%" y="335.50">replay`regex_..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 9.09%)</title><rect x="27.2727%" y="309" width="9.0909%" height="15" fill="rgb(241,83,37)" fg:x="3" fg:w="1"/><text x="27.5227%" y="319.50">replay`regex_..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 9.09%)</title><rect x="27.2727%" y="293" width="9.0909%" height="15" fill="rgb(233,36,39)" fg:x="3" fg:w="1"/><text x="27.5227%" y="303.50">replay`regex_..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 9.09%)</title><rect x="27.2727%" y="277" width="9.0909%" height="15" fill="rgb(226,3,54)" fg:x="3" fg:w="1"/><text x="27.5227%" y="287.50">replay`regex_..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c_repetition (1 samples, 9.09%)</title><rect x="27.2727%" y="261" width="9.0909%" height="15" fill="rgb(245,192,40)" fg:x="3" fg:w="1"/><text x="27.5227%" y="271.50">replay`regex_..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 9.09%)</title><rect x="27.2727%" y="245" width="9.0909%" height="15" fill="rgb(238,167,29)" fg:x="3" fg:w="1"/><text x="27.5227%" y="255.50">replay`regex_..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 9.09%)</title><rect x="27.2727%" y="229" width="9.0909%" height="15" fill="rgb(232,182,51)" fg:x="3" fg:w="1"/><text x="27.5227%" y="239.50">replay`regex_..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (1 samples, 9.09%)</title><rect x="27.2727%" y="213" width="9.0909%" height="15" fill="rgb(231,60,39)" fg:x="3" fg:w="1"/><text x="27.5227%" y="223.50">replay`regex_..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class_reverse_with_suffix (1 samples, 9.09%)</title><rect x="27.2727%" y="197" width="9.0909%" height="15" fill="rgb(208,69,12)" fg:x="3" fg:w="1"/><text x="27.5227%" y="207.50">replay`regex_..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::patch (1 samples, 9.09%)</title><rect x="27.2727%" y="181" width="9.0909%" height="15" fill="rgb(235,93,37)" fg:x="3" fg:w="1"/><text x="27.5227%" y="191.50">replay`regex_..</text></g><g><title>replay`core::cell::RefCell&lt;T&gt;::borrow_mut (1 samples, 9.09%)</title><rect x="27.2727%" y="165" width="9.0909%" height="15" fill="rgb(213,116,39)" fg:x="3" fg:w="1"/><text x="27.5227%" y="175.50">replay`core::..</text></g><g><title>replay`core::cell::RefCell&lt;T&gt;::try_borrow_mut (1 samples, 9.09%)</title><rect x="27.2727%" y="149" width="9.0909%" height="15" fill="rgb(222,207,29)" fg:x="3" fg:w="1"/><text x="27.5227%" y="159.50">replay`core::..</text></g><g><title>replay`core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked::precondition_check (1 samples, 9.09%)</title><rect x="27.2727%" y="133" width="9.0909%" height="15" fill="rgb(206,96,30)" fg:x="3" fg:w="1"/><text x="27.5227%" y="143.50">replay`core::..</text></g><g><title>replay`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (2 samples, 18.18%)</title><rect x="27.2727%" y="677" width="18.1818%" height="15" fill="rgb(218,138,4)" fg:x="3" fg:w="2"/><text x="27.5227%" y="687.50">replay`&lt;core::iter::adapters..</text></g><g><title>replay`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (2 samples, 18.18%)</title><rect x="27.2727%" y="661" width="18.1818%" height="15" fill="rgb(250,191,14)" fg:x="3" fg:w="2"/><text x="27.5227%" y="671.50">replay`core::ops::function::..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c::_{{closure}} (2 samples, 18.18%)</title><rect x="27.2727%" y="645" width="18.1818%" height="15" fill="rgb(239,60,40)" fg:x="3" fg:w="2"/><text x="27.5227%" y="655.50">replay`regex_automata::nfa::..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 18.18%)</title><rect x="27.2727%" y="629" width="18.1818%" height="15" fill="rgb(206,27,48)" fg:x="3" fg:w="2"/><text x="27.5227%" y="639.50">replay`regex_automata::nfa::..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c_alt_slice (2 samples, 18.18%)</title><rect x="27.2727%" y="613" width="18.1818%" height="15" fill="rgb(225,35,8)" fg:x="3" fg:w="2"/><text x="27.5227%" y="623.50">replay`regex_automata::nfa::..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (2 samples, 18.18%)</title><rect x="27.2727%" y="597" width="18.1818%" height="15" fill="rgb(250,213,24)" fg:x="3" fg:w="2"/><text x="27.5227%" y="607.50">replay`regex_automata::nfa::..</text></g><g><title>replay`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 18.18%)</title><rect x="27.2727%" y="581" width="18.1818%" height="15" fill="rgb(247,123,22)" fg:x="3" fg:w="2"/><text x="27.5227%" y="591.50">replay`&lt;core::iter::adapters..</text></g><g><title>replay`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (2 samples, 18.18%)</title><rect x="27.2727%" y="565" width="18.1818%" height="15" fill="rgb(231,138,38)" fg:x="3" fg:w="2"/><text x="27.5227%" y="575.50">replay`core::ops::function::..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c_alt_slice::_{{closure}} (2 samples, 18.18%)</title><rect x="27.2727%" y="549" width="18.1818%" height="15" fill="rgb(231,145,46)" fg:x="3" fg:w="2"/><text x="27.5227%" y="559.50">replay`regex_automata::nfa::..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 18.18%)</title><rect x="27.2727%" y="533" width="18.1818%" height="15" fill="rgb(251,118,11)" fg:x="3" fg:w="2"/><text x="27.5227%" y="543.50">replay`regex_automata::nfa::..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c_concat (2 samples, 18.18%)</title><rect x="27.2727%" y="517" width="18.1818%" height="15" fill="rgb(217,147,25)" fg:x="3" fg:w="2"/><text x="27.5227%" y="527.50">replay`regex_automata::nfa::..</text></g><g><title>replay`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (2 samples, 18.18%)</title><rect x="27.2727%" y="501" width="18.1818%" height="15" fill="rgb(247,81,37)" fg:x="3" fg:w="2"/><text x="27.5227%" y="511.50">replay`&lt;core::iter::adapters..</text></g><g><title>replay`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (2 samples, 18.18%)</title><rect x="27.2727%" y="485" width="18.1818%" height="15" fill="rgb(209,12,38)" fg:x="3" fg:w="2"/><text x="27.5227%" y="495.50">replay`core::ops::function::..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c::_{{closure}} (2 samples, 18.18%)</title><rect x="27.2727%" y="469" width="18.1818%" height="15" fill="rgb(227,1,9)" fg:x="3" fg:w="2"/><text x="27.5227%" y="479.50">replay`regex_automata::nfa::..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 18.18%)</title><rect x="27.2727%" y="453" width="18.1818%" height="15" fill="rgb(248,47,43)" fg:x="3" fg:w="2"/><text x="27.5227%" y="463.50">replay`regex_automata::nfa::..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c_repetition (2 samples, 18.18%)</title><rect x="27.2727%" y="437" width="18.1818%" height="15" fill="rgb(221,10,30)" fg:x="3" fg:w="2"/><text x="27.5227%" y="447.50">replay`regex_automata::nfa::..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c_bounded (2 samples, 18.18%)</title><rect x="27.2727%" y="421" width="18.1818%" height="15" fill="rgb(210,229,1)" fg:x="3" fg:w="2"/><text x="27.5227%" y="431.50">replay`regex_automata::nfa::..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c_exactly (1 samples, 9.09%)</title><rect x="36.3636%" y="405" width="9.0909%" height="15" fill="rgb(222,148,37)" fg:x="4" fg:w="1"/><text x="36.6136%" y="415.50">replay`regex_..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c_concat (1 samples, 9.09%)</title><rect x="36.3636%" y="389" width="9.0909%" height="15" fill="rgb(234,67,33)" fg:x="4" fg:w="1"/><text x="36.6136%" y="399.50">replay`regex_..</text></g><g><title>replay`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (1 samples, 9.09%)</title><rect x="36.3636%" y="373" width="9.0909%" height="15" fill="rgb(247,98,35)" fg:x="4" fg:w="1"/><text x="36.6136%" y="383.50">replay`&lt;core:..</text></g><g><title>replay`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 9.09%)</title><rect x="36.3636%" y="357" width="9.0909%" height="15" fill="rgb(247,138,52)" fg:x="4" fg:w="1"/><text x="36.6136%" y="367.50">replay`core::..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c_exactly::_{{closure}} (1 samples, 9.09%)</title><rect x="36.3636%" y="341" width="9.0909%" height="15" fill="rgb(213,79,30)" fg:x="4" fg:w="1"/><text x="36.6136%" y="351.50">replay`regex_..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 9.09%)</title><rect x="36.3636%" y="325" width="9.0909%" height="15" fill="rgb(246,177,23)" fg:x="4" fg:w="1"/><text x="36.6136%" y="335.50">replay`regex_..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c_alt_slice (1 samples, 9.09%)</title><rect x="36.3636%" y="309" width="9.0909%" height="15" fill="rgb(230,62,27)" fg:x="4" fg:w="1"/><text x="36.6136%" y="319.50">replay`regex_..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (1 samples, 9.09%)</title><rect x="36.3636%" y="293" width="9.0909%" height="15" fill="rgb(216,154,8)" fg:x="4" fg:w="1"/><text x="36.6136%" y="303.50">replay`regex_..</text></g><g><title>replay`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 9.09%)</title><rect x="36.3636%" y="277" width="9.0909%" height="15" fill="rgb(244,35,45)" fg:x="4" fg:w="1"/><text x="36.6136%" y="287.50">replay`&lt;core:..</text></g><g><title>replay`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 9.09%)</title><rect x="36.3636%" y="261" width="9.0909%" height="15" fill="rgb(251,115,12)" fg:x="4" fg:w="1"/><text x="36.6136%" y="271.50">replay`core::..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c_alt_slice::_{{closure}} (1 samples, 9.09%)</title><rect x="36.3636%" y="245" width="9.0909%" height="15" fill="rgb(240,54,50)" fg:x="4" fg:w="1"/><text x="36.6136%" y="255.50">replay`regex_..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 9.09%)</title><rect x="36.3636%" y="229" width="9.0909%" height="15" fill="rgb(233,84,52)" fg:x="4" fg:w="1"/><text x="36.6136%" y="239.50">replay`regex_..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 9.09%)</title><rect x="36.3636%" y="213" width="9.0909%" height="15" fill="rgb(207,117,47)" fg:x="4" fg:w="1"/><text x="36.6136%" y="223.50">replay`regex_..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 9.09%)</title><rect x="36.3636%" y="197" width="9.0909%" height="15" fill="rgb(249,43,39)" fg:x="4" fg:w="1"/><text x="36.6136%" y="207.50">replay`regex_..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c_repetition (1 samples, 9.09%)</title><rect x="36.3636%" y="181" width="9.0909%" height="15" fill="rgb(209,38,44)" fg:x="4" fg:w="1"/><text x="36.6136%" y="191.50">replay`regex_..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 9.09%)</title><rect x="36.3636%" y="165" width="9.0909%" height="15" fill="rgb(236,212,23)" fg:x="4" fg:w="1"/><text x="36.6136%" y="175.50">replay`regex_..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 9.09%)</title><rect x="36.3636%" y="149" width="9.0909%" height="15" fill="rgb(242,79,21)" fg:x="4" fg:w="1"/><text x="36.6136%" y="159.50">replay`regex_..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (1 samples, 9.09%)</title><rect x="36.3636%" y="133" width="9.0909%" height="15" fill="rgb(211,96,35)" fg:x="4" fg:w="1"/><text x="36.6136%" y="143.50">replay`regex_..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class_reverse_with_suffix (1 samples, 9.09%)</title><rect x="36.3636%" y="117" width="9.0909%" height="15" fill="rgb(253,215,40)" fg:x="4" fg:w="1"/><text x="36.6136%" y="127.50">replay`regex_..</text></g><g><title>replay`regex_automata::nfa::thompson::map::Utf8SuffixMap::get (1 samples, 9.09%)</title><rect x="36.3636%" y="101" width="9.0909%" height="15" fill="rgb(211,81,21)" fg:x="4" fg:w="1"/><text x="36.6136%" y="111.50">replay`regex_..</text></g><g><title>replay`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 9.09%)</title><rect x="36.3636%" y="85" width="9.0909%" height="15" fill="rgb(208,190,38)" fg:x="4" fg:w="1"/><text x="36.6136%" y="95.50">replay`&lt;alloc..</text></g><g><title>replay`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 9.09%)</title><rect x="36.3636%" y="69" width="9.0909%" height="15" fill="rgb(235,213,38)" fg:x="4" fg:w="1"/><text x="36.6136%" y="79.50">replay`&lt;alloc..</text></g><g><title>replay`core::slice::raw::from_raw_parts::precondition_check (1 samples, 9.09%)</title><rect x="36.3636%" y="53" width="9.0909%" height="15" fill="rgb(237,122,38)" fg:x="4" fg:w="1"/><text x="36.6136%" y="63.50">replay`core::..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 9.09%)</title><rect x="45.4545%" y="405" width="9.0909%" height="15" fill="rgb(244,218,35)" fg:x="5" fg:w="1"/><text x="45.7045%" y="415.50">replay`regex_..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c_alt_slice (1 samples, 9.09%)</title><rect x="45.4545%" y="389" width="9.0909%" height="15" fill="rgb(240,68,47)" fg:x="5" fg:w="1"/><text x="45.7045%" y="399.50">replay`regex_..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (1 samples, 9.09%)</title><rect x="45.4545%" y="373" width="9.0909%" height="15" fill="rgb(210,16,53)" fg:x="5" fg:w="1"/><text x="45.7045%" y="383.50">replay`regex_..</text></g><g><title>replay`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 9.09%)</title><rect x="45.4545%" y="357" width="9.0909%" height="15" fill="rgb(235,124,12)" fg:x="5" fg:w="1"/><text x="45.7045%" y="367.50">replay`&lt;core:..</text></g><g><title>replay`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 9.09%)</title><rect x="45.4545%" y="341" width="9.0909%" height="15" fill="rgb(224,169,11)" fg:x="5" fg:w="1"/><text x="45.7045%" y="351.50">replay`core::..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c_alt_slice::_{{closure}} (1 samples, 9.09%)</title><rect x="45.4545%" y="325" width="9.0909%" height="15" fill="rgb(250,166,2)" fg:x="5" fg:w="1"/><text x="45.7045%" y="335.50">replay`regex_..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 9.09%)</title><rect x="45.4545%" y="309" width="9.0909%" height="15" fill="rgb(242,216,29)" fg:x="5" fg:w="1"/><text x="45.7045%" y="319.50">replay`regex_..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 9.09%)</title><rect x="45.4545%" y="293" width="9.0909%" height="15" fill="rgb(230,116,27)" fg:x="5" fg:w="1"/><text x="45.7045%" y="303.50">replay`regex_..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 9.09%)</title><rect x="45.4545%" y="277" width="9.0909%" height="15" fill="rgb(228,99,48)" fg:x="5" fg:w="1"/><text x="45.7045%" y="287.50">replay`regex_..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c_repetition (1 samples, 9.09%)</title><rect x="45.4545%" y="261" width="9.0909%" height="15" fill="rgb(253,11,6)" fg:x="5" fg:w="1"/><text x="45.7045%" y="271.50">replay`regex_..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 9.09%)</title><rect x="45.4545%" y="245" width="9.0909%" height="15" fill="rgb(247,143,39)" fg:x="5" fg:w="1"/><text x="45.7045%" y="255.50">replay`regex_..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 9.09%)</title><rect x="45.4545%" y="229" width="9.0909%" height="15" fill="rgb(236,97,10)" fg:x="5" fg:w="1"/><text x="45.7045%" y="239.50">replay`regex_..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (1 samples, 9.09%)</title><rect x="45.4545%" y="213" width="9.0909%" height="15" fill="rgb(233,208,19)" fg:x="5" fg:w="1"/><text x="45.7045%" y="223.50">replay`regex_..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 9.09%)</title><rect x="45.4545%" y="197" width="9.0909%" height="15" fill="rgb(216,164,2)" fg:x="5" fg:w="1"/><text x="45.7045%" y="207.50">replay`regex_..</text></g><g><title>replay`core::iter::traits::iterator::Iterator::count (1 samples, 9.09%)</title><rect x="45.4545%" y="181" width="9.0909%" height="15" fill="rgb(220,129,5)" fg:x="5" fg:w="1"/><text x="45.7045%" y="191.50">replay`core::..</text></g><g><title>replay`&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 9.09%)</title><rect x="45.4545%" y="165" width="9.0909%" height="15" fill="rgb(242,17,10)" fg:x="5" fg:w="1"/><text x="45.7045%" y="175.50">replay`&lt;core:..</text></g><g><title>replay`&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 9.09%)</title><rect x="45.4545%" y="149" width="9.0909%" height="15" fill="rgb(242,107,0)" fg:x="5" fg:w="1"/><text x="45.7045%" y="159.50">replay`&lt;core:..</text></g><g><title>replay`core::iter::traits::iterator::Iterator::try_fold (1 samples, 9.09%)</title><rect x="45.4545%" y="133" width="9.0909%" height="15" fill="rgb(251,28,31)" fg:x="5" fg:w="1"/><text x="45.7045%" y="143.50">replay`core::..</text></g><g><title>replay`&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (1 samples, 9.09%)</title><rect x="45.4545%" y="117" width="9.0909%" height="15" fill="rgb(233,223,10)" fg:x="5" fg:w="1"/><text x="45.7045%" y="127.50">replay`&lt;core:..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Utf8Compiler::add::_{{closure}} (1 samples, 9.09%)</title><rect x="45.4545%" y="101" width="9.0909%" height="15" fill="rgb(215,21,27)" fg:x="5" fg:w="1"/><text x="45.7045%" y="111.50">replay`regex_..</text></g><g><title>replay`core::option::Option&lt;T&gt;::map_or (1 samples, 9.09%)</title><rect x="45.4545%" y="85" width="9.0909%" height="15" fill="rgb(232,23,21)" fg:x="5" fg:w="1"/><text x="45.7045%" y="95.50">replay`core::..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Utf8Compiler::add::_{{closure}}::_{{closure}} (1 samples, 9.09%)</title><rect x="45.4545%" y="69" width="9.0909%" height="15" fill="rgb(244,5,23)" fg:x="5" fg:w="1"/><text x="45.7045%" y="79.50">replay`regex_..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 9.09%)</title><rect x="54.5455%" y="117" width="9.0909%" height="15" fill="rgb(226,81,46)" fg:x="6" fg:w="1"/><text x="54.7955%" y="127.50">replay`regex_..</text></g><g><title>replay`core::iter::traits::iterator::Iterator::zip (1 samples, 9.09%)</title><rect x="54.5455%" y="101" width="9.0909%" height="15" fill="rgb(247,70,30)" fg:x="6" fg:w="1"/><text x="54.7955%" y="111.50">replay`core::..</text></g><g><title>replay`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (1 samples, 9.09%)</title><rect x="54.5455%" y="85" width="9.0909%" height="15" fill="rgb(212,68,19)" fg:x="6" fg:w="1"/><text x="54.7955%" y="95.50">replay`&lt;core:..</text></g><g><title>replay`regex_automata::meta::regex::Builder::build_many_from_hir (5 samples, 45.45%)</title><rect x="27.2727%" y="869" width="45.4545%" height="15" fill="rgb(240,187,13)" fg:x="3" fg:w="5"/><text x="27.5227%" y="879.50">replay`regex_automata::meta::regex::Builder::build_many_from_hir</text></g><g><title>replay`regex_automata::meta::strategy::new (5 samples, 45.45%)</title><rect x="27.2727%" y="853" width="45.4545%" height="15" fill="rgb(223,113,26)" fg:x="3" fg:w="5"/><text x="27.5227%" y="863.50">replay`regex_automata::meta::strategy::new</text></g><g><title>replay`regex_automata::meta::strategy::Core::new (5 samples, 45.45%)</title><rect x="27.2727%" y="837" width="45.4545%" height="15" fill="rgb(206,192,2)" fg:x="3" fg:w="5"/><text x="27.5227%" y="847.50">replay`regex_automata::meta::strategy::Core::new</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::build_many_from_hir (5 samples, 45.45%)</title><rect x="27.2727%" y="821" width="45.4545%" height="15" fill="rgb(241,108,4)" fg:x="3" fg:w="5"/><text x="27.5227%" y="831.50">replay`regex_automata::nfa::thompson::compiler::Compiler::build_many_from_h..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::compile (5 samples, 45.45%)</title><rect x="27.2727%" y="805" width="45.4545%" height="15" fill="rgb(247,173,49)" fg:x="3" fg:w="5"/><text x="27.5227%" y="815.50">replay`regex_automata::nfa::thompson::compiler::Compiler::compile</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (5 samples, 45.45%)</title><rect x="27.2727%" y="789" width="45.4545%" height="15" fill="rgb(224,114,35)" fg:x="3" fg:w="5"/><text x="27.5227%" y="799.50">replay`regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter</text></g><g><title>replay`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 45.45%)</title><rect x="27.2727%" y="773" width="45.4545%" height="15" fill="rgb(245,159,27)" fg:x="3" fg:w="5"/><text x="27.5227%" y="783.50">replay`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator..</text></g><g><title>replay`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (5 samples, 45.45%)</title><rect x="27.2727%" y="757" width="45.4545%" height="15" fill="rgb(245,172,44)" fg:x="3" fg:w="5"/><text x="27.5227%" y="767.50">replay`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; fo..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::compile::_{{closure}} (5 samples, 45.45%)</title><rect x="27.2727%" y="741" width="45.4545%" height="15" fill="rgb(236,23,11)" fg:x="3" fg:w="5"/><text x="27.5227%" y="751.50">replay`regex_automata::nfa::thompson::compiler::Compiler::compile::_{{closu..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c_cap (5 samples, 45.45%)</title><rect x="27.2727%" y="725" width="45.4545%" height="15" fill="rgb(205,117,38)" fg:x="3" fg:w="5"/><text x="27.5227%" y="735.50">replay`regex_automata::nfa::thompson::compiler::Compiler::c_cap</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c (5 samples, 45.45%)</title><rect x="27.2727%" y="709" width="45.4545%" height="15" fill="rgb(237,72,25)" fg:x="3" fg:w="5"/><text x="27.5227%" y="719.50">replay`regex_automata::nfa::thompson::compiler::Compiler::c</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c_concat (5 samples, 45.45%)</title><rect x="27.2727%" y="693" width="45.4545%" height="15" fill="rgb(244,70,9)" fg:x="3" fg:w="5"/><text x="27.5227%" y="703.50">replay`regex_automata::nfa::thompson::compiler::Compiler::c_concat</text></g><g><title>replay`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 27.27%)</title><rect x="45.4545%" y="677" width="27.2727%" height="15" fill="rgb(217,125,39)" fg:x="5" fg:w="3"/><text x="45.7045%" y="687.50">replay`&lt;core::iter::adapters::map::Map&lt;I,F&gt; ..</text></g><g><title>replay`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (3 samples, 27.27%)</title><rect x="45.4545%" y="661" width="27.2727%" height="15" fill="rgb(235,36,10)" fg:x="5" fg:w="3"/><text x="45.7045%" y="671.50">replay`core::ops::function::impls::_&lt;impl co..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c::_{{closure}} (3 samples, 27.27%)</title><rect x="45.4545%" y="645" width="27.2727%" height="15" fill="rgb(251,123,47)" fg:x="5" fg:w="3"/><text x="45.7045%" y="655.50">replay`regex_automata::nfa::thompson::compil..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c (3 samples, 27.27%)</title><rect x="45.4545%" y="629" width="27.2727%" height="15" fill="rgb(221,13,13)" fg:x="5" fg:w="3"/><text x="45.7045%" y="639.50">replay`regex_automata::nfa::thompson::compil..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c_alt_slice (3 samples, 27.27%)</title><rect x="45.4545%" y="613" width="27.2727%" height="15" fill="rgb(238,131,9)" fg:x="5" fg:w="3"/><text x="45.7045%" y="623.50">replay`regex_automata::nfa::thompson::compil..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (3 samples, 27.27%)</title><rect x="45.4545%" y="597" width="27.2727%" height="15" fill="rgb(211,50,8)" fg:x="5" fg:w="3"/><text x="45.7045%" y="607.50">replay`regex_automata::nfa::thompson::compil..</text></g><g><title>replay`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 27.27%)</title><rect x="45.4545%" y="581" width="27.2727%" height="15" fill="rgb(245,182,24)" fg:x="5" fg:w="3"/><text x="45.7045%" y="591.50">replay`&lt;core::iter::adapters::map::Map&lt;I,F&gt; ..</text></g><g><title>replay`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (3 samples, 27.27%)</title><rect x="45.4545%" y="565" width="27.2727%" height="15" fill="rgb(242,14,37)" fg:x="5" fg:w="3"/><text x="45.7045%" y="575.50">replay`core::ops::function::impls::_&lt;impl co..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c_alt_slice::_{{closure}} (3 samples, 27.27%)</title><rect x="45.4545%" y="549" width="27.2727%" height="15" fill="rgb(246,228,12)" fg:x="5" fg:w="3"/><text x="45.7045%" y="559.50">replay`regex_automata::nfa::thompson::compil..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c (3 samples, 27.27%)</title><rect x="45.4545%" y="533" width="27.2727%" height="15" fill="rgb(213,55,15)" fg:x="5" fg:w="3"/><text x="45.7045%" y="543.50">replay`regex_automata::nfa::thompson::compil..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c_concat (3 samples, 27.27%)</title><rect x="45.4545%" y="517" width="27.2727%" height="15" fill="rgb(209,9,3)" fg:x="5" fg:w="3"/><text x="45.7045%" y="527.50">replay`regex_automata::nfa::thompson::compil..</text></g><g><title>replay`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 27.27%)</title><rect x="45.4545%" y="501" width="27.2727%" height="15" fill="rgb(230,59,30)" fg:x="5" fg:w="3"/><text x="45.7045%" y="511.50">replay`&lt;core::iter::adapters::map::Map&lt;I,F&gt; ..</text></g><g><title>replay`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (3 samples, 27.27%)</title><rect x="45.4545%" y="485" width="27.2727%" height="15" fill="rgb(209,121,21)" fg:x="5" fg:w="3"/><text x="45.7045%" y="495.50">replay`core::ops::function::impls::_&lt;impl co..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c::_{{closure}} (3 samples, 27.27%)</title><rect x="45.4545%" y="469" width="27.2727%" height="15" fill="rgb(220,109,13)" fg:x="5" fg:w="3"/><text x="45.7045%" y="479.50">replay`regex_automata::nfa::thompson::compil..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c (3 samples, 27.27%)</title><rect x="45.4545%" y="453" width="27.2727%" height="15" fill="rgb(232,18,1)" fg:x="5" fg:w="3"/><text x="45.7045%" y="463.50">replay`regex_automata::nfa::thompson::compil..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c_repetition (3 samples, 27.27%)</title><rect x="45.4545%" y="437" width="27.2727%" height="15" fill="rgb(215,41,42)" fg:x="5" fg:w="3"/><text x="45.7045%" y="447.50">replay`regex_automata::nfa::thompson::compil..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c_bounded (3 samples, 27.27%)</title><rect x="45.4545%" y="421" width="27.2727%" height="15" fill="rgb(224,123,36)" fg:x="5" fg:w="3"/><text x="45.7045%" y="431.50">replay`regex_automata::nfa::thompson::compil..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c_exactly (2 samples, 18.18%)</title><rect x="54.5455%" y="405" width="18.1818%" height="15" fill="rgb(240,125,3)" fg:x="6" fg:w="2"/><text x="54.7955%" y="415.50">replay`regex_automata::nfa::..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c_concat (2 samples, 18.18%)</title><rect x="54.5455%" y="389" width="18.1818%" height="15" fill="rgb(205,98,50)" fg:x="6" fg:w="2"/><text x="54.7955%" y="399.50">replay`regex_automata::nfa::..</text></g><g><title>replay`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 18.18%)</title><rect x="54.5455%" y="373" width="18.1818%" height="15" fill="rgb(205,185,37)" fg:x="6" fg:w="2"/><text x="54.7955%" y="383.50">replay`&lt;core::iter::adapters..</text></g><g><title>replay`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (2 samples, 18.18%)</title><rect x="54.5455%" y="357" width="18.1818%" height="15" fill="rgb(238,207,15)" fg:x="6" fg:w="2"/><text x="54.7955%" y="367.50">replay`core::ops::function::..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c_exactly::_{{closure}} (2 samples, 18.18%)</title><rect x="54.5455%" y="341" width="18.1818%" height="15" fill="rgb(213,199,42)" fg:x="6" fg:w="2"/><text x="54.7955%" y="351.50">replay`regex_automata::nfa::..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 18.18%)</title><rect x="54.5455%" y="325" width="18.1818%" height="15" fill="rgb(235,201,11)" fg:x="6" fg:w="2"/><text x="54.7955%" y="335.50">replay`regex_automata::nfa::..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c_alt_slice (2 samples, 18.18%)</title><rect x="54.5455%" y="309" width="18.1818%" height="15" fill="rgb(207,46,11)" fg:x="6" fg:w="2"/><text x="54.7955%" y="319.50">replay`regex_automata::nfa::..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (2 samples, 18.18%)</title><rect x="54.5455%" y="293" width="18.1818%" height="15" fill="rgb(241,35,35)" fg:x="6" fg:w="2"/><text x="54.7955%" y="303.50">replay`regex_automata::nfa::..</text></g><g><title>replay`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 18.18%)</title><rect x="54.5455%" y="277" width="18.1818%" height="15" fill="rgb(243,32,47)" fg:x="6" fg:w="2"/><text x="54.7955%" y="287.50">replay`&lt;core::iter::adapters..</text></g><g><title>replay`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (2 samples, 18.18%)</title><rect x="54.5455%" y="261" width="18.1818%" height="15" fill="rgb(247,202,23)" fg:x="6" fg:w="2"/><text x="54.7955%" y="271.50">replay`core::ops::function::..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c_alt_slice::_{{closure}} (2 samples, 18.18%)</title><rect x="54.5455%" y="245" width="18.1818%" height="15" fill="rgb(219,102,11)" fg:x="6" fg:w="2"/><text x="54.7955%" y="255.50">replay`regex_automata::nfa::..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 18.18%)</title><rect x="54.5455%" y="229" width="18.1818%" height="15" fill="rgb(243,110,44)" fg:x="6" fg:w="2"/><text x="54.7955%" y="239.50">replay`regex_automata::nfa::..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c_cap (2 samples, 18.18%)</title><rect x="54.5455%" y="213" width="18.1818%" height="15" fill="rgb(222,74,54)" fg:x="6" fg:w="2"/><text x="54.7955%" y="223.50">replay`regex_automata::nfa::..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 18.18%)</title><rect x="54.5455%" y="197" width="18.1818%" height="15" fill="rgb(216,99,12)" fg:x="6" fg:w="2"/><text x="54.7955%" y="207.50">replay`regex_automata::nfa::..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c_repetition (2 samples, 18.18%)</title><rect x="54.5455%" y="181" width="18.1818%" height="15" fill="rgb(226,22,26)" fg:x="6" fg:w="2"/><text x="54.7955%" y="191.50">replay`regex_automata::nfa::..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c_at_least (2 samples, 18.18%)</title><rect x="54.5455%" y="165" width="18.1818%" height="15" fill="rgb(217,163,10)" fg:x="6" fg:w="2"/><text x="54.7955%" y="175.50">replay`regex_automata::nfa::..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 18.18%)</title><rect x="54.5455%" y="149" width="18.1818%" height="15" fill="rgb(213,25,53)" fg:x="6" fg:w="2"/><text x="54.7955%" y="159.50">replay`regex_automata::nfa::..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (2 samples, 18.18%)</title><rect x="54.5455%" y="133" width="18.1818%" height="15" fill="rgb(252,105,26)" fg:x="6" fg:w="2"/><text x="54.7955%" y="143.50">replay`regex_automata::nfa::..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Utf8Compiler::new (1 samples, 9.09%)</title><rect x="63.6364%" y="117" width="9.0909%" height="15" fill="rgb(220,39,43)" fg:x="7" fg:w="1"/><text x="63.8864%" y="127.50">replay`regex_..</text></g><g><title>replay`regex_automata::nfa::thompson::compiler::Utf8State::clear (1 samples, 9.09%)</title><rect x="63.6364%" y="101" width="9.0909%" height="15" fill="rgb(229,68,48)" fg:x="7" fg:w="1"/><text x="63.8864%" y="111.50">replay`regex_..</text></g><g><title>replay`regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (1 samples, 9.09%)</title><rect x="63.6364%" y="85" width="9.0909%" height="15" fill="rgb(252,8,32)" fg:x="7" fg:w="1"/><text x="63.8864%" y="95.50">replay`regex_..</text></g><g><title>replay`alloc::vec::from_elem (1 samples, 9.09%)</title><rect x="63.6364%" y="69" width="9.0909%" height="15" fill="rgb(223,20,43)" fg:x="7" fg:w="1"/><text x="63.8864%" y="79.50">replay`alloc:..</text></g><g><title>replay`&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1 samples, 9.09%)</title><rect x="63.6364%" y="53" width="9.0909%" height="15" fill="rgb(229,81,49)" fg:x="7" fg:w="1"/><text x="63.8864%" y="63.50">replay`&lt;T as ..</text></g><g><title>replay`alloc::vec::Vec&lt;T,A&gt;::extend_with (1 samples, 9.09%)</title><rect x="63.6364%" y="37" width="9.0909%" height="15" fill="rgb(236,28,36)" fg:x="7" fg:w="1"/><text x="63.8864%" y="47.50">replay`alloc:..</text></g><g><title>replay`&lt;once_cell::sync::Lazy&lt;T,F&gt; as core::ops::deref::Deref&gt;::deref (6 samples, 54.55%)</title><rect x="27.2727%" y="1157" width="54.5455%" height="15" fill="rgb(249,185,26)" fg:x="3" fg:w="6"/><text x="27.5227%" y="1167.50">replay`&lt;once_cell::sync::Lazy&lt;T,F&gt; as core::ops::deref::Deref&gt;::deref</text></g><g><title>replay`once_cell::sync::Lazy&lt;T,F&gt;::force (6 samples, 54.55%)</title><rect x="27.2727%" y="1141" width="54.5455%" height="15" fill="rgb(249,174,33)" fg:x="3" fg:w="6"/><text x="27.5227%" y="1151.50">replay`once_cell::sync::Lazy&lt;T,F&gt;::force</text></g><g><title>replay`once_cell::sync::OnceCell&lt;T&gt;::get_or_init (6 samples, 54.55%)</title><rect x="27.2727%" y="1125" width="54.5455%" height="15" fill="rgb(233,201,37)" fg:x="3" fg:w="6"/><text x="27.5227%" y="1135.50">replay`once_cell::sync::OnceCell&lt;T&gt;::get_or_init</text></g><g><title>replay`once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (6 samples, 54.55%)</title><rect x="27.2727%" y="1109" width="54.5455%" height="15" fill="rgb(221,78,26)" fg:x="3" fg:w="6"/><text x="27.5227%" y="1119.50">replay`once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init</text></g><g><title>replay`once_cell::imp::OnceCell&lt;T&gt;::initialize (6 samples, 54.55%)</title><rect x="27.2727%" y="1093" width="54.5455%" height="15" fill="rgb(250,127,30)" fg:x="3" fg:w="6"/><text x="27.5227%" y="1103.50">replay`once_cell::imp::OnceCell&lt;T&gt;::initialize</text></g><g><title>replay`once_cell::imp::initialize_or_wait (6 samples, 54.55%)</title><rect x="27.2727%" y="1077" width="54.5455%" height="15" fill="rgb(230,49,44)" fg:x="3" fg:w="6"/><text x="27.5227%" y="1087.50">replay`once_cell::imp::initialize_or_wait</text></g><g><title>replay`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (6 samples, 54.55%)</title><rect x="27.2727%" y="1061" width="54.5455%" height="15" fill="rgb(229,67,23)" fg:x="3" fg:w="6"/><text x="27.5227%" y="1071.50">replay`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_..</text></g><g><title>replay`once_cell::imp::OnceCell&lt;T&gt;::initialize::_{{closure}} (6 samples, 54.55%)</title><rect x="27.2727%" y="1045" width="54.5455%" height="15" fill="rgb(249,83,47)" fg:x="3" fg:w="6"/><text x="27.5227%" y="1055.50">replay`once_cell::imp::OnceCell&lt;T&gt;::initialize::_{{closure}}</text></g><g><title>replay`once_cell::sync::OnceCell&lt;T&gt;::get_or_init::_{{closure}} (6 samples, 54.55%)</title><rect x="27.2727%" y="1029" width="54.5455%" height="15" fill="rgb(215,43,3)" fg:x="3" fg:w="6"/><text x="27.5227%" y="1039.50">replay`once_cell::sync::OnceCell&lt;T&gt;::get_or_init::_{{closure}}</text></g><g><title>replay`once_cell::sync::Lazy&lt;T,F&gt;::force::_{{closure}} (6 samples, 54.55%)</title><rect x="27.2727%" y="1013" width="54.5455%" height="15" fill="rgb(238,154,13)" fg:x="3" fg:w="6"/><text x="27.5227%" y="1023.50">replay`once_cell::sync::Lazy&lt;T,F&gt;::force::_{{closure}}</text></g><g><title>replay`core::ops::function::FnOnce::call_once (6 samples, 54.55%)</title><rect x="27.2727%" y="997" width="54.5455%" height="15" fill="rgb(219,56,2)" fg:x="3" fg:w="6"/><text x="27.5227%" y="1007.50">replay`core::ops::function::FnOnce::call_once</text></g><g><title>replay`core::ops::function::FnOnce::call_once (6 samples, 54.55%)</title><rect x="27.2727%" y="981" width="54.5455%" height="15" fill="rgb(233,0,4)" fg:x="3" fg:w="6"/><text x="27.5227%" y="991.50">replay`core::ops::function::FnOnce::call_once</text></g><g><title>replay`tracing_subscriber::filter::env::directive::Directive::parse::DIRECTIVE_RE::_{{closure}} (6 samples, 54.55%)</title><rect x="27.2727%" y="965" width="54.5455%" height="15" fill="rgb(235,30,7)" fg:x="3" fg:w="6"/><text x="27.5227%" y="975.50">replay`tracing_subscriber::filter::env::directive::Directive::parse::DIRECTIVE_RE::_{{clos..</text></g><g><title>replay`regex::regex::string::Regex::new (6 samples, 54.55%)</title><rect x="27.2727%" y="949" width="54.5455%" height="15" fill="rgb(250,79,13)" fg:x="3" fg:w="6"/><text x="27.5227%" y="959.50">replay`regex::regex::string::Regex::new</text></g><g><title>replay`regex::builders::string::RegexBuilder::build (6 samples, 54.55%)</title><rect x="27.2727%" y="933" width="54.5455%" height="15" fill="rgb(211,146,34)" fg:x="3" fg:w="6"/><text x="27.5227%" y="943.50">replay`regex::builders::string::RegexBuilder::build</text></g><g><title>replay`regex::builders::Builder::build_one_string (6 samples, 54.55%)</title><rect x="27.2727%" y="917" width="54.5455%" height="15" fill="rgb(228,22,38)" fg:x="3" fg:w="6"/><text x="27.5227%" y="927.50">replay`regex::builders::Builder::build_one_string</text></g><g><title>replay`regex_automata::meta::regex::Builder::build (6 samples, 54.55%)</title><rect x="27.2727%" y="901" width="54.5455%" height="15" fill="rgb(235,168,5)" fg:x="3" fg:w="6"/><text x="27.5227%" y="911.50">replay`regex_automata::meta::regex::Builder::build</text></g><g><title>replay`regex_automata::meta::regex::Builder::build_many (6 samples, 54.55%)</title><rect x="27.2727%" y="885" width="54.5455%" height="15" fill="rgb(221,155,16)" fg:x="3" fg:w="6"/><text x="27.5227%" y="895.50">replay`regex_automata::meta::regex::Builder::build_many</text></g><g><title>replay`regex_syntax::ast::parse::Parser::parse (1 samples, 9.09%)</title><rect x="72.7273%" y="869" width="9.0909%" height="15" fill="rgb(215,215,53)" fg:x="8" fg:w="1"/><text x="72.9773%" y="879.50">replay`regex_..</text></g><g><title>replay`regex_syntax::ast::parse::ParserI&lt;P&gt;::parse (1 samples, 9.09%)</title><rect x="72.7273%" y="853" width="9.0909%" height="15" fill="rgb(223,4,10)" fg:x="8" fg:w="1"/><text x="72.9773%" y="863.50">replay`regex_..</text></g><g><title>replay`regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 9.09%)</title><rect x="72.7273%" y="837" width="9.0909%" height="15" fill="rgb(234,103,6)" fg:x="8" fg:w="1"/><text x="72.9773%" y="847.50">replay`regex_..</text></g><g><title>replay`regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_primitive (1 samples, 9.09%)</title><rect x="72.7273%" y="821" width="9.0909%" height="15" fill="rgb(227,97,0)" fg:x="8" fg:w="1"/><text x="72.9773%" y="831.50">replay`regex_..</text></g><g><title>replay`regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 9.09%)</title><rect x="72.7273%" y="805" width="9.0909%" height="15" fill="rgb(234,150,53)" fg:x="8" fg:w="1"/><text x="72.9773%" y="815.50">replay`regex_..</text></g><g><title>replay`regex_syntax::ast::parse::ParserI&lt;P&gt;::offset (1 samples, 9.09%)</title><rect x="72.7273%" y="789" width="9.0909%" height="15" fill="rgb(228,201,54)" fg:x="8" fg:w="1"/><text x="72.9773%" y="799.50">replay`regex_..</text></g><g><title>replay`regex_syntax::ast::parse::ParserI&lt;P&gt;::parser (1 samples, 9.09%)</title><rect x="72.7273%" y="773" width="9.0909%" height="15" fill="rgb(222,22,37)" fg:x="8" fg:w="1"/><text x="72.9773%" y="783.50">replay`regex_..</text></g><g><title>dyld`start (10 samples, 90.91%)</title><rect x="0.0000%" y="1333" width="90.9091%" height="15" fill="rgb(237,53,32)" fg:x="0" fg:w="10"/><text x="0.2500%" y="1343.50">dyld`start</text></g><g><title>replay`main (10 samples, 90.91%)</title><rect x="0.0000%" y="1317" width="90.9091%" height="15" fill="rgb(233,25,53)" fg:x="0" fg:w="10"/><text x="0.2500%" y="1327.50">replay`main</text></g><g><title>replay`std::rt::lang_start (10 samples, 90.91%)</title><rect x="0.0000%" y="1301" width="90.9091%" height="15" fill="rgb(210,40,34)" fg:x="0" fg:w="10"/><text x="0.2500%" y="1311.50">replay`std::rt::lang_start</text></g><g><title>replay`std::rt::lang_start_internal (10 samples, 90.91%)</title><rect x="0.0000%" y="1285" width="90.9091%" height="15" fill="rgb(241,220,44)" fg:x="0" fg:w="10"/><text x="0.2500%" y="1295.50">replay`std::rt::lang_start_internal</text></g><g><title>replay`std::rt::lang_start::_{{closure}} (9 samples, 81.82%)</title><rect x="9.0909%" y="1269" width="81.8182%" height="15" fill="rgb(235,28,35)" fg:x="1" fg:w="9"/><text x="9.3409%" y="1279.50">replay`std::rt::lang_start::_{{closure}}</text></g><g><title>replay`std::sys_common::backtrace::__rust_begin_short_backtrace (9 samples, 81.82%)</title><rect x="9.0909%" y="1253" width="81.8182%" height="15" fill="rgb(210,56,17)" fg:x="1" fg:w="9"/><text x="9.3409%" y="1263.50">replay`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>replay`core::ops::function::FnOnce::call_once (9 samples, 81.82%)</title><rect x="9.0909%" y="1237" width="81.8182%" height="15" fill="rgb(224,130,29)" fg:x="1" fg:w="9"/><text x="9.3409%" y="1247.50">replay`core::ops::function::FnOnce::call_once</text></g><g><title>replay`replay::main (9 samples, 81.82%)</title><rect x="9.0909%" y="1221" width="81.8182%" height="15" fill="rgb(235,212,8)" fg:x="1" fg:w="9"/><text x="9.3409%" y="1231.50">replay`replay::main</text></g><g><title>replay`replay::set_global_subscriber (7 samples, 63.64%)</title><rect x="27.2727%" y="1205" width="63.6364%" height="15" fill="rgb(223,33,50)" fg:x="3" fg:w="7"/><text x="27.5227%" y="1215.50">replay`replay::set_global_subscriber</text></g><g><title>replay`&lt;tracing_subscriber::filter::env::directive::Directive as core::str::traits::FromStr&gt;::from_str (7 samples, 63.64%)</title><rect x="27.2727%" y="1189" width="63.6364%" height="15" fill="rgb(219,149,13)" fg:x="3" fg:w="7"/><text x="27.5227%" y="1199.50">replay`&lt;tracing_subscriber::filter::env::directive::Directive as core::str::traits::FromStr&gt;::from_str</text></g><g><title>replay`tracing_subscriber::filter::env::directive::Directive::parse (7 samples, 63.64%)</title><rect x="27.2727%" y="1173" width="63.6364%" height="15" fill="rgb(250,156,29)" fg:x="3" fg:w="7"/><text x="27.5227%" y="1183.50">replay`tracing_subscriber::filter::env::directive::Directive::parse</text></g><g><title>replay`regex::regex::string::Regex::captures (1 samples, 9.09%)</title><rect x="81.8182%" y="1157" width="9.0909%" height="15" fill="rgb(216,193,19)" fg:x="9" fg:w="1"/><text x="82.0682%" y="1167.50">replay`regex:..</text></g><g><title>replay`regex::regex::string::Regex::captures_at (1 samples, 9.09%)</title><rect x="81.8182%" y="1141" width="9.0909%" height="15" fill="rgb(216,135,14)" fg:x="9" fg:w="1"/><text x="82.0682%" y="1151.50">replay`regex:..</text></g><g><title>replay`regex_automata::meta::regex::Regex::search_captures (1 samples, 9.09%)</title><rect x="81.8182%" y="1125" width="9.0909%" height="15" fill="rgb(241,47,5)" fg:x="9" fg:w="1"/><text x="82.0682%" y="1135.50">replay`regex_..</text></g><g><title>replay`regex_automata::meta::regex::Regex::search_slots (1 samples, 9.09%)</title><rect x="81.8182%" y="1109" width="9.0909%" height="15" fill="rgb(233,42,35)" fg:x="9" fg:w="1"/><text x="82.0682%" y="1119.50">replay`regex_..</text></g><g><title>replay`regex_automata::util::pool::Pool&lt;T,F&gt;::get (1 samples, 9.09%)</title><rect x="81.8182%" y="1093" width="9.0909%" height="15" fill="rgb(231,13,6)" fg:x="9" fg:w="1"/><text x="82.0682%" y="1103.50">replay`regex_..</text></g><g><title>replay`regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get (1 samples, 9.09%)</title><rect x="81.8182%" y="1077" width="9.0909%" height="15" fill="rgb(207,181,40)" fg:x="9" fg:w="1"/><text x="82.0682%" y="1087.50">replay`regex_..</text></g><g><title>replay`regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 9.09%)</title><rect x="81.8182%" y="1061" width="9.0909%" height="15" fill="rgb(254,173,49)" fg:x="9" fg:w="1"/><text x="82.0682%" y="1071.50">replay`regex_..</text></g><g><title>replay`&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (1 samples, 9.09%)</title><rect x="81.8182%" y="1045" width="9.0909%" height="15" fill="rgb(221,1,38)" fg:x="9" fg:w="1"/><text x="82.0682%" y="1055.50">replay`&lt;alloc..</text></g><g><title>replay`regex_automata::meta::regex::Builder::build_many_from_hir::_{{closure}} (1 samples, 9.09%)</title><rect x="81.8182%" y="1029" width="9.0909%" height="15" fill="rgb(206,124,46)" fg:x="9" fg:w="1"/><text x="82.0682%" y="1039.50">replay`regex_..</text></g><g><title>replay`&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 9.09%)</title><rect x="81.8182%" y="1013" width="9.0909%" height="15" fill="rgb(249,21,11)" fg:x="9" fg:w="1"/><text x="82.0682%" y="1023.50">replay`&lt;regex..</text></g><g><title>replay`regex_automata::meta::wrappers::PikeVM::create_cache (1 samples, 9.09%)</title><rect x="81.8182%" y="997" width="9.0909%" height="15" fill="rgb(222,201,40)" fg:x="9" fg:w="1"/><text x="82.0682%" y="1007.50">replay`regex_..</text></g><g><title>replay`regex_automata::meta::wrappers::PikeVMCache::new (1 samples, 9.09%)</title><rect x="81.8182%" y="981" width="9.0909%" height="15" fill="rgb(235,61,29)" fg:x="9" fg:w="1"/><text x="82.0682%" y="991.50">replay`regex_..</text></g><g><title>replay`regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 9.09%)</title><rect x="81.8182%" y="965" width="9.0909%" height="15" fill="rgb(219,207,3)" fg:x="9" fg:w="1"/><text x="82.0682%" y="975.50">replay`regex_..</text></g><g><title>replay`regex_automata::nfa::thompson::pikevm::Cache::new (1 samples, 9.09%)</title><rect x="81.8182%" y="949" width="9.0909%" height="15" fill="rgb(222,56,46)" fg:x="9" fg:w="1"/><text x="82.0682%" y="959.50">replay`regex_..</text></g><g><title>replay`regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 9.09%)</title><rect x="81.8182%" y="933" width="9.0909%" height="15" fill="rgb(239,76,54)" fg:x="9" fg:w="1"/><text x="82.0682%" y="943.50">replay`regex_..</text></g><g><title>replay`regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 9.09%)</title><rect x="81.8182%" y="917" width="9.0909%" height="15" fill="rgb(231,124,27)" fg:x="9" fg:w="1"/><text x="82.0682%" y="927.50">replay`regex_..</text></g><g><title>replay`regex_automata::nfa::thompson::pikevm::SlotTable::reset (1 samples, 9.09%)</title><rect x="81.8182%" y="901" width="9.0909%" height="15" fill="rgb(249,195,6)" fg:x="9" fg:w="1"/><text x="82.0682%" y="911.50">replay`regex_..</text></g><g><title>replay`alloc::vec::Vec&lt;T,A&gt;::resize (1 samples, 9.09%)</title><rect x="81.8182%" y="885" width="9.0909%" height="15" fill="rgb(237,174,47)" fg:x="9" fg:w="1"/><text x="82.0682%" y="895.50">replay`alloc:..</text></g><g><title>replay`alloc::vec::Vec&lt;T,A&gt;::extend_with (1 samples, 9.09%)</title><rect x="81.8182%" y="869" width="9.0909%" height="15" fill="rgb(206,201,31)" fg:x="9" fg:w="1"/><text x="82.0682%" y="879.50">replay`alloc:..</text></g><g><title>all (11 samples, 100%)</title><rect x="0.0000%" y="1349" width="100.0000%" height="15" fill="rgb(231,57,52)" fg:x="0" fg:w="11"/><text x="0.2500%" y="1359.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 9.09%)</title><rect x="90.9091%" y="1333" width="9.0909%" height="15" fill="rgb(248,177,22)" fg:x="10" fg:w="1"/><text x="91.1591%" y="1343.50">libsystem_ker..</text></g></svg></svg>