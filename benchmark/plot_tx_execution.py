import argparse
import pathlib

import pandas as pd
import matplotlib.pyplot as plt
from pandas import DataFrame

from plot_utils import plot_distribution, save_df_artifact

parser = argparse.ArgumentParser(
    description="""
        Generates tx execution artifacts from raw tx bench data.
     """
)
parser.add_argument(
    "native_input",
    type=pathlib.Path,
    help="""
        Path to the native tx bench data, as generated by the replay's
        bench-block-range command.
    """,
)
parser.add_argument(
    "vm_input",
    type=pathlib.Path,
    help="""
        Path to the vm tx bench data, as generated by the replay's
        bench-block-range command.
    """,
)
parser.add_argument(
    "output",
    type=pathlib.Path,
    help="""
        Path to the output artifacts directory. For each artifact, a sidecar
        metadata file is saved.
    """,
)
parser.add_argument(
    "--show",
    action="store_true",
    help="""
        Displays the generated plots.
    """,
)
args = parser.parse_args()

args.output.mkdir(parents=True, exist_ok=True)


native_df: DataFrame = pd.read_csv(args.native_input)
vm_df: DataFrame = pd.read_csv(args.vm_input)

native_df["gas"] += native_df["steps"] * 100
native_df = native_df.drop("steps", axis=1)
vm_df["gas"] += vm_df["steps"] * 100
vm_df = vm_df.drop("steps", axis=1)

speedup = vm_df["time_ns"] / native_df["time_ns"]
native_throughput = native_df["gas"] / native_df["time_ns"]
vm_throughput = vm_df["gas"] / vm_df["time_ns"]

plot_distribution(
    args.output,
    speedup,
    "Speedup",
    "Tx Speedup Distribution",
    "Calculates the distribution of the transaction execution speedup.",
)

plot_distribution(
    args.output,
    native_throughput,
    "Throughput (Gigagas/s)",
    "Native Throughput Distribution",
    "Calculates the distribution of Cairo Native throughput.",
)

plot_distribution(
    args.output,
    vm_throughput,
    "Throughput (Gigagas/s)",
    "VM Throughput Distribution",
    "Calculates the distribution of Cairo VM throughput.",
)

df = pd.DataFrame(
    {
        "tx_hash": native_df["tx_hash"],
        "native_time_ns": native_df["time_ns"],
        "vm_time_ns": vm_df["time_ns"],
        "native_gas": native_df["gas"],
        "vm_gas": vm_df["gas"],
        "native_throughput": native_throughput,
        "vm_throughput": vm_throughput,
        "speedup": speedup,
    }
)
save_df_artifact(
    args.output,
    df,
    {
        "title": "Cairo VM vs. Cairo Native",
        "description": "Compares the execution of Cairo VM with Cairo Native.",
    },
    index=False,
)

if args.show:
    plt.show()
