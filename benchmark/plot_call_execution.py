import argparse
import pathlib

import pandas as pd
import matplotlib.pyplot as plt
from pandas import DataFrame, Series

from plot_utils import save_df_artifact, plot_distribution

parser = argparse.ArgumentParser(
    description="""
        Generates call execution artifacts from raw cal bench data.
     """
)
parser.add_argument(
    "native_input",
    type=pathlib.Path,
    help="""
        Path to the native call bench data, as generated by the replay's
        bench-block-range command.
    """,
)
parser.add_argument(
    "vm_input",
    type=pathlib.Path,
    help="""
        Path to the vm call bench data, as generated by the replay's
        bench-block-range command.
    """,
)
parser.add_argument(
    "output",
    type=pathlib.Path,
    help="""
        Path to the output artifacts directory. For each artifact, a sidecar
        metadata file is saved.
    """,
)
parser.add_argument(
    "--show",
    action="store_true",
    help="""
        Displays the generated plots.
    """,
)
args = parser.parse_args()


args.output.mkdir(parents=True, exist_ok=True)

native_df: DataFrame = pd.read_csv(args.native_input)
vm_df: DataFrame = pd.read_csv(args.vm_input)

native_df["gas"] += native_df["steps"] * 100
native_df = native_df.drop("steps", axis=1)

vm_df["gas"] += vm_df["steps"] * 100
vm_df = vm_df.drop("steps", axis=1)

vm_class_time: Series = vm_df.groupby("class_hash")["time_ns"].sum()  # type: ignore
native_class_time: Series = native_df.groupby("class_hash")["time_ns"].sum()  # type: ignore
class_speedup: Series = vm_class_time.div(native_class_time)

plot_distribution(
    args.output,
    class_speedup,
    "Speedup",
    "Contract Class Speedup Distribution",
    "Calculates the distribution of the contract class execution speedup. Note that it does not take into account the execution time of each contract class, so it does not relate with the total execution speedup.",
    log=True,
)

best_classes = class_speedup.nsmallest(10)
worst_classes = class_speedup.nlargest(10)
edge_classes = pd.concat([best_classes, worst_classes]).sort_values()

edge_classes.index.name = "Class Hash"
edge_classes.rename("Speedup", inplace=True)
edge_classes = edge_classes.round(3)
save_df_artifact(
    args.output,
    edge_classes,
    {
        "title": "Edge Contract Classes",
        "description": "Contract classes with highest or lowest speedup.",
    },
)

if args.show:
    plt.show()
