import argparse
import pathlib
import inflection
import json

import pandas as pd
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt
import scipy

from pandas import DataFrame

parser = argparse.ArgumentParser(
    description="""
        Generates compilation artifacts from raw benchmark data.
     """
)
parser.add_argument(
    "input",
    type=pathlib.Path,
    help="""
        Path to the benchmark data, as generated by the replay's
        bench-compilation command.
    """,
)
parser.add_argument(
    "output",
    type=pathlib.Path,
    help="""
        Path to the output artifacts directory. For each artifact, a sidecar
        metadata file is saved.
    """,
)
parser.add_argument(
    "--show",
    action="store_true",
    help="""
        Displays the generated plots.
    """,
)
args = parser.parse_args()


def save_artifact(metadata):
    slug = inflection.parameterize(metadata["title"])

    plt.savefig(f"{args.output}/{slug}.svg")
    with open(f"{args.output}/{slug}.meta.json", "w") as f:
        json.dump(metadata, f, indent=4)


args.output.mkdir(parents=True, exist_ok=True)

df: DataFrame = pd.read_csv(args.input)
df["native_time_s"] = df["native_time_ns"] / 1e9
df["casm_time_s"] = df["casm_time_ns"] / 1e9
df["object_size_kb"] = df["object_size_bytes"] / 2**10

fig, ax = plt.subplots(2)
sns.boxplot(df, ax=ax[0], x="native_time_s", showfliers=False)
ax[0].set_xlabel("Time (s)")
sns.stripplot(df, ax=ax[1], x="native_time_s", alpha=0.25, jitter=0.4)
ax[1].set_xlabel("Time (s)")
fig.subplots_adjust(hspace=0.30)
fig.suptitle("Compilation Time Distribution")
save_artifact(
    {
        "title": "Compilation Time Distribution",
        "description": "Calculates the distribution of the contract compilation time.",
        "statistics": df["native_time_s"].describe().to_dict(),
    }
)

fig, ax = plt.subplots(2)
sns.boxplot(df, ax=ax[0], x="object_size_kb", showfliers=False)
ax[0].set_xlabel("Size (KiB)")
sns.stripplot(df, ax=ax[1], x="object_size_kb", alpha=0.25, jitter=0.4)
ax[1].set_xlabel("Size (KiB)")
fig.subplots_adjust(hspace=0.30)
fig.suptitle("Compiled Contract Size Distribution")
save_artifact(
    {
        "title": "Compiled Contract Size Distribution",
        "description": "Calculates the distribution of the compiled contract size.",
        "statistics": df["object_size_kb"].describe().to_dict(),
    }
)

zscores = np.abs(scipy.stats.zscore(df[["native_time_ns", "object_size_bytes"]]))
df: DataFrame = df[(zscores < 3).all(axis=1)]  # type: ignore

_, ax = plt.subplots()
sns.regplot(df, ax=ax, x="sierra_statement_count", y="object_size_kb")
ax.set_title("Sierra Size vs. Compiled Contract Size")
ax.set_xlabel("Sierra Statement Count")
ax.set_ylabel("Compiled Contract Size (KiB)")
save_artifact(
    {
        "title": "Sierra Size vs. Compiled Contract Size",
        "description": "Correlates the Sierra size with the compiled contract size.",
    }
)

_, ax = plt.subplots()
sns.regplot(df, ax=ax, x="sierra_statement_count", y="native_time_s")
ax.set_title("Sierra Size vs. Compilation Time")
ax.set_xlabel("Sierra Statement Count")
ax.set_ylabel("Compilation Time (s)")
save_artifact(
    {
        "title": "Sierra Size vs. Compilation Time",
        "description": "Correlates the Sierra size with the compilation time.",
    }
)

_, ax = plt.subplots()
sns.regplot(df, ax=ax, x="casm_time_s", y="native_time_s")
ax.set_title("CASM Compilation Time vs. Native Compilation Time")
ax.set_xlabel("CASM Compilation Time (s)")
ax.set_ylabel("Native Compilation Time (s)")
save_artifact(
    {
        "title": "CASM Compilation Time vs. Native Compilation Time",
        "description": "Correlates the CASM compilation time with the Native compilation time.",
    }
)

if args.show:
    plt.show()
